#!/usr/bin/env python
#
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Matthieu Huin <mhu@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""Command line utility to generate reports or single graphs from a healthcheck
dataset generated by eDeploy.

grapher [-r all][-o XXX] healthcheck_result_file|"POSIX filter"

options:

-g --graph (histogram) : generate a specific graph
-k --keys key1,...,keyN : filter by the given keys

-o --output-prefix OUTPUT: output directory will be named after this value,
default is report or graph name + current timestamp"""


import argparse
from datetime import datetime
import sys
import glob

from models import models
from reports import reports, BaseReport


def main():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('-r', '--report', type=str,
                        metavar = '(%s|all)' % '|'.join(reports.keys()),
                        help='generate a standard report')
    parser.add_argument('-g', '--graph', type=str,
                        metavar = '(%s)' % '|'.join(models.keys()),
                        help='Generate a specific graph,'
                             'ignored if -r argument is present')
    parser.add_argument('-k', '--keys', type=str,
                        metavar = 'key1,...,keyN',
                        help='filter data to graph by the given keys')
    now = datetime.now()
    parser.add_argument('-o', '--output-prefix',
                        metavar='OUTPUT',
                        type=str, default=now.strftime("%Y%m%d_%H%M%S"),
                        help='prefix for the output stats results')
    parser.add_argument("healthcheck", metavar="HEALTHCHECK_FILE",
                        type=str, help="the file generated by the "+\
                                       "healthcheck. A POSIX filter between " +\
                                       "quotes (example: 'health*.hw') " +\
                                       "can also be used")

    args = parser.parse_args()
    bench_values = []
    for f in glob.glob(args.healthcheck):
        try:
            temp_bench_values = eval(open(f).read())
        except(Exception), e:
            print "Could not use healthcheck file: %s" % e
            sys.exit(1)
        bench_values += [ (f, ) + v for v in temp_bench_values]

    if not (args.graph and args.keys):
        if not args.report:
            print "Generating full report by default."
            report = reports['all']
        else:
            if args.report not in reports.keys():
                print "%s is not a predefinite report, exiting." % args.report
                sys.exit(1)
            report = reports[args.report]
    else:
        report = BaseReport([[args.graph, args.keys.split(',')]])
    
    report.data = bench_values
    report.generate_report(args.output_prefix)  
    
                             
if __name__ == '__main__':
    main()
