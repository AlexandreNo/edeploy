#!/bin/bash
#
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Erwan Velu <erwan.velu@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

SRC="$1"
IMG="$2"
VER="$3"
INST="$4"
SERV="$5"
HSERV="$6"
DEBUG="$7"
MODE="$8"
FLASH_IMAGE="$2-$3.img"
VDI_IMAGE="$2-$3.vdi"
FLASH_SIZE=128 #in Megabytes
LOOPBACK_BOOT=NONE
LOOPBACK_DATA=NONE
BOOT_MOUNT_POINT=/tmp/$2-$3.tmp
#TESTING_SYSLINUX=Testing/6.02
SYSLINUX_VER=5.10

if [ ! -d "$SRC" ]; then
   echo "Usage: $0 <source dir> <img> <version> <initrd_path> <ip_serv>" 1>&2
   exit 1
fi

step() {
    echo "################################################################"
    echo "$@ ($PROG_NAME)"
    echo "################################################################"
}

fatal_error() {
        echo $1;
        exit 1
}

check_binary() {
        which $1 || fatal_error "$1 is missing"
}

get_fdisk_parameter() {
    FLASH_SIZE=$1 #in MB
    BYTE_SIZE="512"
    FLASH_SECTORS=32
    FLASH_HEADS=64
    ONE_CYLINDER=$(( $FLASH_HEADS * $FLASH_SECTORS * $BYTE_SIZE ))
    FLASH_CYNLINDERS=$(( $FLASH_SIZE * 1024 * 1024 / $ONE_CYLINDER ))
    FLASH_SECTORS_COUNT=$(( $FLASH_SIZE * 1024 *1024 / $BYTE_SIZE ))
    echo "-C $FLASH_CYNLINDERS -S $FLASH_SECTORS -H $FLASH_HEADS"
}

prepare_flash_image() {
    step "Prepare flash image"

    if [ "$MODE" = "health" ]; then
        FLASH_IMAGE="$MODE-$VER.img"
        VDI_IMAGE="$MODE-$VER.vdi"
    fi

    if [ ! -e $FLASH_IMAGE ]; then

        echo "Zeroification in progess"
        dd if=/dev/zero of=$FLASH_IMAGE bs=1M count=$FLASH_SIZE
        sync

        echo "Partionning in progress"
        if [ "$MODE" = "health" ]; then
            sfdisk -uM --force $(get_fdisk_parameter $FLASH_SIZE) $FLASH_IMAGE << EOF
0,10,
10,,L,*
EOF
        else
            sfdisk -uM --force $(get_fdisk_parameter $FLASH_SIZE) $FLASH_IMAGE << EOF
,,L,*
EOF
        fi
    fi
}


losetupsizeopt() {
    OPTION="-s"
    # On older version of losetup, we shall use --sizelimit option
    losetup -h 2>&1 | grep -q '\-\-sizelimit' && OPTION="--sizelimit"
    echo "$OPTION"
}

loop_offset(){
    FLASH_IMAGE=$1
    PARTITION=$2
    PART_OFFSET=$(sfdisk -l $FLASH_IMAGE -uS 2>/dev/null | grep "img${PARTITION}" | tr -d '*' |  awk '{print $2}' | tr -d '+')
    PART_OFFSET_BYTES=$(( $PART_OFFSET * 512 ))
    echo $PART_OFFSET_BYTES
}

loop_size(){
    FLASH_IMAGE=$1
    PARTITION=$2
    PART_SIZE=$(sfdisk -l $FLASH_IMAGE -uM  2>/dev/null | grep "img${PARTITION}" | tr -d '*' | awk '{print $5}' | tr -d '+' )
    PART_SIZE_MB=$(( $PART_SIZE * 1024 ));
    echo $PART_SIZE_MB
}

prepare_flash_fs() {
    step "Prepare flash fs"

    LOOPBACK_BOOT=$(losetup -f)

    #Let's search the next loopback device
    if [ "$MODE" = "health" ]; then
        losetup -o $(loop_offset $FLASH_IMAGE 2) $(losetupsizeopt) $(loop_size $FLASH_IMAGE 2) $LOOPBACK_BOOT $FLASH_IMAGE
        LOOPBACK_DATA=$(losetup -f)
        losetup -o $(loop_offset $FLASH_IMAGE 1) $(losetupsizeopt) $(loop_size $FLASH_IMAGE 1) $LOOPBACK_DATA $FLASH_IMAGE
        echo "Formatting /ahcexport"
        mkfs.vfat -n ahcexport $LOOPBACK_DATA
    else
        losetup -o $(loop_offset $FLASH_IMAGE 1) $(losetupsizeopt) $(loop_size $FLASH_IMAGE 1) $LOOPBACK_BOOT $FLASH_IMAGE
    fi

    echo "Formatting /boot"
    mkfs.ext2 -F -L boot $LOOPBACK_BOOT
    tune2fs -i 0 -c 0 $LOOPBACK_BOOT

    sync
}

free_loopbacks() {
    step "Free loopback"

    #Let's clean the loopback devices
    if [ "$LOOPBACK_BOOT" != "NONE" ]; then
            losetup -d $LOOPBACK_BOOT
    fi

    if [ "$LOOPBACK_DATA" != "NONE" ]; then
            losetup -d $LOOPBACK_DATA
    fi

}

mount_flash_fs() {
    step "Mount flash fs"

    mkdir -p $BOOT_MOUNT_POINT
    mount $LOOPBACK_BOOT $BOOT_MOUNT_POINT

    if [ ! `grep $BOOT_MOUNT_POINT /proc/mounts | wc -l` ]; then
        die "Flash System isn't mounted !"
    fi
}

copy_os_to_flash() {
    step "Copy OS to flash"

    cp -f ${SRC}/boot/vmlinuz* $BOOT_MOUNT_POINT/vmlinuz
    if [ "$MODE" = "health" ]; then
        cp -f ${INST}/health.pxe $BOOT_MOUNT_POINT
    else
        cp -f ${INST}/initrd.pxe $BOOT_MOUNT_POINT
    fi
}

setup_bootloader() {

    KERNEL_OPTIONS="quiet panic=-1 oops=panic consoleblank=0"
    if [ -z "$ONSUCCESS" ]; then
        ONSUCCESS="halt"
    fi
    if [ -z "$ONFAILURE" ]; then
        ONSUCCESS="console"
    fi
    mkdir $1/extlinux
    if [ "$MODE" = "health" ]; then
COMMON_ARGS="$KERNEL_OPTIONS SERV=$SERV HSERV=$HSERV DEBUG=$DEBUG UPLOAD_LOG=${UPLOAD_LOG} ONFAILURE=$ONFAILURE ONSUCCESS=$ONSUCCESS"
cat << EOF >> $1/extlinux/extlinux.conf
TIMEOUT 100
PROMPT 1
UI menu.c32
DEFAULT SAFE
MENU TITLE Automatic Health Check ($VER)
MENU ROWS 13

LABEL SAFE
        MENU DEFAULT
        MENU LABEL Run Benchmark in safe mode ( No Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS

LABEL SAFE1H
        MENU LABEL Run Benchmark in safe mode ( 1H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=60

LABEL SAFE12H
        MENU LABEL Run Benchmark in safe mode (12H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=720

LABEL SAFE24H
        MENU LABEL Run Benchmark in safe mode (24H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=1440

LABEL SAFE48H
        MENU LABEL Run Benchmark in safe mode (48H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=2880

LABEL SAFE72H
        MENU LABEL Run Benchmark in safe mode (72H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=4320

MENU SEPARATOR

LABEL DESTRUCTIVE
        MENU LABEL Run Benchmark in destructive mode ( No Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1

LABEL DESTRUCTIVE1H
        MENU LABEL Run Benchmark in destructive mode ( 1H Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=60

LABEL DESTRUCTIVE12H
        MENU LABEL Run Benchmark in destructive mode (12H Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=720

LABEL DESTRUCTIVE24H
        MENU LABEL Run Benchmark in destructive mode (24h Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=1440

LABEL DESTRUCTIVE48H
        MENU LABEL Run Benchmark in destructive mode (48h Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=2880

LABEL DESTRUCTIVE72H
        MENU LABEL Run Benchmark in destructive mode (72h Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=4320

EOF
    else
cat << EOF >> $1/extlinux/extlinux.conf
TOTALTIMEOUT 10
PROMPT 0
DEFAULT FLASH

LABEL FLASH
        KERNEL /vmlinuz
        INITRD /initrd.pxe
        APPEND $KERNEL_OPTIONS SERV=$SERV HSERV=$HSERV DEBUG=$DEBUG UPLOAD_LOG=${UPLOAD_LOG}

EOF
    fi
}

umount_flash_fs() {
    step "Umount flash fs"

    umount $BOOT_MOUNT_POINT
}

create_vdi() {
    type -p VBoxManage &>/dev/null || return
    step "Creating VDI file for VirtualBox"
    rm -f $VDI_IMAGE &>/dev/null
    VBoxManage convertfromraw $FLASH_IMAGE --format VDI $VDI_IMAGE &>/dev/null
    echo "Virtual Image for VirtualBox is available here : $VDI_IMAGE"
}

install_bootloader() {
    step "Install bootloader"

    mkdir -p $BOOT_MOUNT_POINT/extlinux
    if [ ! -x extlinux/extlinux ] || [ ! -f extlinux/menu.c32 ] || [ ! -f extlinux/libutil.c32 ]; then
        rm -rf extlinux
        mkdir -p extlinux
        # Installing extlinux & mbr from source
        wget --no-verbose ftp://ftp.kernel.org/pub/linux/utils/boot/syslinux/${TESTING_SYSLINUX}/syslinux-${SYSLINUX_VER}.tar.xz
        tar -xf syslinux-${SYSLINUX_VER}.tar.xz
        cp syslinux-${SYSLINUX_VER}/extlinux/extlinux extlinux/
        cp syslinux-${SYSLINUX_VER}/mbr/mbr.bin extlinux/
        cp syslinux-${SYSLINUX_VER}/com32/menu/menu.c32 extlinux/
        cp syslinux-${SYSLINUX_VER}/com32/libutil/libutil.c32 extlinux/
        rm -rf syslinux-${SYSLINUX_VER}*
    fi

    cp extlinux/*.c32 $BOOT_MOUNT_POINT/extlinux/
    extlinux/extlinux --install $BOOT_MOUNT_POINT/extlinux
    if [ $? -ne 0 ]; then
        umount_flash_fs
        fatal_error "Cannot execute extlinux. Please check if your system features a 32bit glibc"
    fi

    umount_flash_fs

    #Installing mbr
    dd if=extlinux/mbr.bin of=$FLASH_IMAGE conv=notrunc
}

check_binary losetup
check_binary sfdisk
check_binary mkfs.ext2
if [ "$MODE" = "health" ]; then
    check_binary mkfs.vfat
fi
check_binary tune2fs

prepare_flash_image
prepare_flash_fs

mount_flash_fs
copy_os_to_flash

setup_bootloader $BOOT_MOUNT_POINT
install_bootloader

free_loopbacks

create_vdi
echo "Raw disk image is available here               : $FLASH_IMAGE"
